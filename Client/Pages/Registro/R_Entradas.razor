@page "/EntradaProductos"
@page "/EntradaProductos/{EntradaId:int}"
@using Parcial2_Kissland.Client.Extensors
@inject HttpClient httpClient
@inject NotificationService notificationService

<EditForm Model="entradas" OnValidSubmit="Guardar">
    <DataAnnotationsValidator />

    <div class="container">
        <div class="card shadow-lg">
            <div class="card-header">
                <h3>Registro de entrada y productos.</h3>
            </div>
            <div class=card-body>
                <div class="col-xs-12 col-sm-12 col-md-8 col-lg-6 col-xl-4">
                    <label>Entrada Id:</label>
                    <div class="input-group mb-3">
                        <InputNumber @bind-Value="entradas.EntradaId" class="form-control" aria-describedby="BotonBuscar" />
                        <button @onclick="Buscar" class="btn btn-outline-primary" 
                        type="button" id="BotonBuscar"><i class="oi oi-magnifying-glass"></i></button>
                    </div>
                </div>

                <div class="mb-3">
                    <label class="form-label" for="Fecha">Fecha:</label>
                    <InputDate @bind-Value="entradas.Fecha" class="form-control" />
                    <ValidationMessage For="() => entradas.Fecha" />
                </div>

                <div class="mb-3">
                    <label class="form-label" for="Concepto">Concepto:</label>
                    <InputText @bind-Value="entradas.Concepto" class="form-control" />
                    <ValidationMessage For="() => entradas.Concepto" />
                </div>
                
          @*Detalles:*@
        <div class="card card-header">
            <h3>Utilizados</h3>
        </div>
        <div class="card-body border border-1">
            <div class="row">
                <div class="col-md-6">
                    <label>Producto</label>
                    <InputSelect @bind-Value="entradasDetalle.ProductoId" class="form-select">
                        <option value="" hidden="hidden">Seleccione</option>
                        @foreach (var p in L_Productos)
                        {
                            if(p.Tipo == 0)
                            {
                                <option value="@p.ProductoId">@p.Descripcion</option>
                            }    
                        }
                    </InputSelect>
                    <ValidationMessage For="@(() => entradasDetalle.ProductoId)" />
                </div>
                <div class="col-md-6">
                    <label>Cantidad</label>
                    <div class="input-group">
                        <InputNumber @bind-Value="entradasDetalle.CantidadUtilizada" class="form-control"></InputNumber>
                        <button type="button" class="btn btn-success" @onclick="AgregarDetalle"><i class="oi oi-plus" />Agregar</button>
                        <ValidationMessage For="@(() => entradasDetalle.CantidadUtilizada)" />
                    </div>
                </div>
            </div> 
        </div>
        <table class='table table-responsive table-striped'>
            <thead>
                <tr>
                    <th>Producto Id</th>
                    <th>Descripci&oacute;n</th>
                    <th>Cantidad</th>
                    <th></th>
                </tr>
            </thead>
            <tbody>
                @foreach (var item in entradas.EntradasDetalles)
                    {
                        <tr>
                            <td>@item.ProductoId</td>
                            <td>@L_Productos.FirstOrDefault(p => p.ProductoId == item.ProductoId)?.Descripcion</td>
                            <td>@item.CantidadUtilizada</td>
                            <td>
                                <td><button type="button" class="btn btn-danger" @onclick=@(() => EliminarDetalle(item))><i class="oi oi-trash" /></button></td>
                            </td>
                        </tr>
                    }
                    @*<tr>
                        <td>Peso Total: @entradas.PesoTotal g</td>
                    </tr>
                    *@
            </tbody>
        </table>
        <fieldset class="card card-header border border-1">
            <legend>Producido</legend>
            <div class="row">
                <div class="col-md-6">
                    <label>Producto:</label>
                    <InputSelect @bind-Value="entradas.ProductoId" class="form-select">
                        <option value="0" hidden="hidden">Seleccione</option>
                        @foreach (var p in L_Productos)
                        {
                            if (p.Tipo == 1)
                            {
                                <option value="@p.ProductoId">@p.Descripcion</option>
                            }
                        }
                    </InputSelect>
                </div>
                <div class="col-2">
                    <label>Cantidad:</label>
                    <input disabled @bind-value="@entradas.CantidadProducida" type="text" class="form-control" placeholder="Cantidad" />
                </div>
            </div>
        </fieldset>
            </div>
            <div class="card-footer d-flex justify-content-center">
                <div class="btn-group">
                    <button type="button" class="btn btn-outline-primary" @onclick="Nuevo">Nuevo <i class="oi oi-file"></i></button>
                    <button type="submit" class="btn btn-outline-success">Guardar <i class="oi oi-document"></i></button>
                    <button type="button" class="btn btn-outline-danger" @onclick="Eliminar">Eliminar <i class="oi oi-trash"></i></button>
                </div>
            </div>
        </div>
    </div>
</EditForm>
<label>@Mensaje</label>

@code {
    [Parameter]
    public int EntradaId { get; set; }
    public int ProductoId { get; set; }
    public int maniId { get; set; }
    public int pasasId { get; set; }
    public int pistachosId { get; set; }
    public int ciruelasId { get; set; }
    public Entradas entradas { get; set; } = new Entradas();
    public EntradasDetalle entradasDetalle { get; set; } = new EntradasDetalle();
    public string Mensaje { get; set; } = string.Empty;
    public int Total { get; set; } = 0;
    public int Cantidad { get; set; }
    public decimal pesoTotal { get; set; } = 0;
    public List<Productos> L_Productos { get; set; } = new List<Productos>();
    
    protected override async Task OnInitializedAsync()
    {
        var Productos = await httpClient.GetFromJsonAsync<List<Productos>>("api/Productos");

        if (Productos is not null)
        {
            L_Productos = Productos;
        }
    }

    public void Nuevo()
    {
        this.entradas = new Entradas();
        Total = 0;
        Mensaje = string.Empty;
    }
    
    public async Task Buscar()
    {
        try
        {
            int Suma = 0;
            var entradaEncontrada = await httpClient.GetFromJsonAsync<Entradas>($"api/Entradas/{entradas.EntradaId}");
            if (entradaEncontrada != null)
            {
                this.entradas = entradaEncontrada;
            }
            else
            {
                notificationService.ShowNotification(
                    titulo: "Error de búsqueda",
                    mensaje: "Registro no encontrado",
                    NotificationSeverity.Error);
            }
            foreach (var item in entradas.EntradasDetalles)
            {
                Suma += item.CantidadUtilizada;
                Total = Suma;
            }           
        }
        catch (Exception ex)
        {
            notificationService.ShowNotification(
                titulo: "Error de búsqueda",
                mensaje: ex.Message,
                NotificationSeverity.Error);
        }
    }

    public async Task Guardar()
    {
        try
        {
            if (entradas.EntradasDetalles.Count == 0 || Total % 50 != 0)
            {
                notificationService.ShowNotification(
                    titulo: "Error al guardar",
                    mensaje: "No se puede guardar porque la cantidad necesaria por producto debe ser 50 para crear una bolsa.",
                    NotificationSeverity.Warning);
                return;
            }

            if (!Validar())
            {
                notificationService.ShowNotification(
                    titulo: "Error al guardar",
                    mensaje: "Por favor, complete todos los campos correctamente antes de guardar.",
                    NotificationSeverity.Warning);
                return;
            }

            // Verifica si hay al menos tres productos distintos en los detalles
            var cantidadProductosDistintos = entradas.EntradasDetalles.Select(d => d.ProductoId).Distinct().Count();
            if (cantidadProductosDistintos < 3)
            {
                notificationService.ShowNotification(
                    titulo: "Error al guardar",
                    mensaje: "Debe agregar al menos tres productos distintos antes de guardar.",
                    NotificationSeverity.Warning);
                return;
            }

            // Resto de tu código para guardar...

            // Esta parte permanece sin cambios
            using var response = await httpClient.PostAsJsonAsync("api/Entradas", entradas);
            response.EnsureSuccessStatusCode();

            var entradaDevuelta = await response.Content.ReadFromJsonAsync<Entradas>();
            if (entradaDevuelta != null)
            {
                notificationService.ShowNotification(
                    titulo: "Éxito",
                    mensaje: "Guardado correctamente",
                    NotificationSeverity.Success);

                this.entradas = entradaDevuelta;
                this.entradas.EntradasDetalles.Clear();
                Total = 0;

                Nuevo();
            }
        }
        catch (Exception ex)
        {
            notificationService.ShowNotification(
                titulo: "Error al guardar",
                mensaje: ex.Message,
                NotificationSeverity.Error);
        }
    }



    public async Task Eliminar()
    {
        using var response = await httpClient.DeleteAsync($"api/Entradas/{entradas.EntradaId}");

        if(!response.IsSuccessStatusCode)
        {
            notificationService.ShowNotification(titulo: "No eliminado", mensaje: "No hay nada por eliminar", NotificationSeverity.Warning);
            return;
        }
        else
        {
            Nuevo();
            notificationService.ShowNotification(titulo: "Eliminado", mensaje: "El producto se ha eliminado correctamente", NotificationSeverity.Error);
        }
    }

    public bool Validar()
    {
        if (string.IsNullOrEmpty(entradas.Concepto))
        {
            return false;
        }
        if (entradas.PesoTotal < 0)
        {
            return false;
        }
        if (entradas.ProductoId < 0)
        {
            return false;
        }
        if (entradas.CantidadProducida < 0)
        {
            return false;
        }
        else
        {
            return true;
        }
    }

    public bool ValidarDetalle()
    {
        if (entradasDetalle.ProductoId < 0)
        {
            return false;
        }
        if (entradasDetalle.CantidadUtilizada < 0)
        {
            return false;
        }
        else
        {
            return true;
        }
    }

    private async Task<Productos> BuscarEntradas(int ProductoId)
    {
        var producto = await httpClient.GetFromJsonAsync<Productos>($"api/Productos/{ProductoId}");

        if(producto == null)
        {
            return new Productos();
        }

        return producto;
    }

    public async Task AgregarDetalle()
    {
        if (ValidarDetalle())
        {
            if (entradasDetalle.CantidadUtilizada <= 0)
            {
                notificationService.ShowNotification(titulo: "Error", mensaje: "La cantidad a utilizar debe ser mayor que cero", NotificationSeverity.Warning);
                return;
            }

            var producto = await BuscarEntradas(entradasDetalle.ProductoId);

            if (producto != null)
            {
                if (entradas.EntradasDetalles.Any(d => d.ProductoId == entradasDetalle.ProductoId))
                {
                    notificationService.ShowNotification(titulo: "Error", mensaje: "El producto ya ha sido agregado", NotificationSeverity.Warning);
                    return;
                }

                int Suma = 0;

                if (entradasDetalle.CantidadUtilizada > producto.Existencia)
                {
                    notificationService.ShowNotification(titulo: "Error", mensaje: "La cantidad a utilizar es mayor que la existencia del producto", NotificationSeverity.Warning);
                    return;
                }

                entradasDetalle.EntradaId = entradas.EntradaId;
                entradas.EntradasDetalles.Add(entradasDetalle);
                entradasDetalle = new EntradasDetalle();

                foreach (var item in entradas.EntradasDetalles)
                {
                    Suma += item.CantidadUtilizada;
                    Total = Suma;
                }

                const int CantidadNecesariaPorBolsa = 50;
                const int TiposDeProductosNecesarios = 3;

                if (Total % CantidadNecesariaPorBolsa != 0 || entradas.EntradasDetalles.Select(d => d.ProductoId).Distinct().Count() < TiposDeProductosNecesarios)
                {
                    notificationService.ShowNotification(titulo: "Error", mensaje: $"Debe agregar al menos {CantidadNecesariaPorBolsa} productos y de al menos {TiposDeProductosNecesarios} tipos diferentes antes de guardar el detalle", NotificationSeverity.Warning);
                    entradas.EntradasDetalles.Remove(entradasDetalle);

                    return;
                }

                int bolsasProducidas = Total / CantidadNecesariaPorBolsa;
                entradas.CantidadProducida = bolsasProducidas;

                var detallesEspecificos = entradas.EntradasDetalles
                    .Where(d => d.ProductoId == maniId || d.ProductoId == pasasId || d.ProductoId == pistachosId || d.ProductoId == ciruelasId)
                    .ToList();

                entradas.PesoTotal = detallesEspecificos.Sum(d => d.CantidadUtilizada * L_Productos.FirstOrDefault(p => p.ProductoId == d.ProductoId)?.Peso ?? 0);

                var cantidadProducto = entradas.EntradasDetalles.Count(d => d.ProductoId == entradasDetalle.ProductoId);
                if (cantidadProducto % CantidadNecesariaPorBolsa == 0)
                {
                    entradasDetalle = new EntradasDetalle();
                }
            }
        }
    }
    
    public void EliminarDetalle(EntradasDetalle entradasDetalle)
    {
        this.entradas.EntradasDetalles.Remove(entradasDetalle);

        Total = this.entradas.EntradasDetalles.Sum(t => t.CantidadUtilizada);
        entradas.CantidadProducida = Total * 1;

        notificationService.ShowNotification(
            titulo: "Detalle Eliminado",
            mensaje: "El detalle se ha eliminado correctamente",
            NotificationSeverity.Success);

    }
}